Technical Tasks
Set 1: Monitoring System Resources for a Proxy Server
Task Description:
You are required to create a Bash script that monitors various system resources and presents them in a dashboard format. The script should refresh the data every few seconds,providing real-time insights. Additionally, it should allow users to call specific parts of the dashboard individually using command-line switches.
1. Top 10 Most Used Applications:
Display the top 10 applications consuming the most CPU and memory.
2. Network Monitoring:
- Number of concurrent connections to the server.
= Packetd oMB in and out.
3. Disk Usage:
- Display the disk space usage by mounted partitions.
- Highlight partitions using more than 80% of the space.
4. System Load:
- Show the current load average for the system.
- Include a breakdown of CPU usage (user, system, Idle, etc.).
5. Memory Usage:
- Display total, used, and free memory.
- Swap memory usage.
6. Process Monitoring:
- Display the number of active processes.
- Show top 5 processes in terms of CPU and memory usage.
7. Service Monitoring:
- Include a section to monitor the status of essential services like sshd,
nginx/apache, iptables, etc.
8. Custom Dashboard:
- Provide command-line switches to view specific parts of the dashboard, e.g.
- cpu, - memory, -network, etc.

Deliverables:
* Upload your project to github
    
• A README file explaining how to use the script, including examples of calling
individual parts of the dashboard.
Evaluation Criteria:
• Correctness and completeness of the monitoring script.
• Efficiency and performance of the script, especially with real-time data updates.
• Usability and documentation provided in the README file.
• Ability to customize and extend the script for additional monitoring.


    Set 2: Script for Automating Security Audits and Server Hardening on
    Linux Servers
    Task Description:
    You are required to create a Bash script that automates both the security audit and the hardening process of Linux servers. The script should be reusable and modular, allowing it to be easily deployed across multiple servers to ensure they meet stringent security standards. The script should include checks for common security vulnerabilities, IPv4/1Pv6 configurations, public vs. private IP identification, and the implementation of hardening measures as outlined in the provided document. The final script should be uploaded to a GitHub repository with comprehensive documentation.
    Requirements:
    1. User and Group Audits:
    - List all users and groups on the server.
    - Check for users with UID 0 (root privileges) and report any non-standard
    users.
    - Identify and report any users without passwords or with weak passwords.
    2. File and Directory Permissions:
    Scan for files and directories with world-writable permissions.
    Check for the presence of .ssh directories and ensure they have secure
    permissions.
    Report any files with SUID or SGID bits set, particularly on executables.
    3. Service Audits:
    - List all running services and check for any unnecessary or unauthorized
    services.
    - Ensure that critical services (eg, sshd, iptables) are running and properly
    configured.
    - Check that no services are listening on non-standard or insecure ports.
    4. Firewall and Network Security:
    - Verify that a firewall (eg, iptables, ufw) is active and configured to block
    unauthorized access.
    - Report any open ports and their associated services.
    Check for and report any IP forwarding or other insecure network
    configurations.
    5. IP and Network Configuration Checks:
    Public vs. Private IP Checks:
    • Identify whether the server's IP addresses are public or private.
    • Provide a summary of all IP addresses assigned to the server,
    specifying which are public and which are private.
    • Ensure that sensitive services (e.g. SSH) are not exposed on public IPs
    unless required.
    6. Security Updates and Patching:
    Check for and report any available security updates or patches.
    - Ensure that the server is configured to receive and install security updates
    regularly.
    7. Log Monitoring:
    Check for any recent suspicious log entries that may indicate a security
    breach, such as too many login attempts on SSH.
    8. Server Hardening Steps:
    - SSH Configuration:
    •To lome oss key-based authentication and disable password-based
    • Ensure that SSH keys are securely stored and used.
    Disabling IPv6 (if not required):
    • Disable IPv6 if it is not in use, following the provided guidelines.
    • Update services like SafeSquid to listen on the correct IPv4 addresses
    after disabling IPv6.
    Securing the Bootloader:
    • Set a password for the GRUB bootloader to prevent unauthorized
    changes to boot parameters.

    - Firewall Configuration:
    • Implement the recommended iptables rules, including default
    - Automate loback Interface acceptance, and specife port allowances.
    • Configure unattended-upgrades to automatically apply security
    updates and remove unused packages, following the provided
    guidelines.
    9. Custom Security Checks:
    Allow the script to be easily extended with custom security checks based on
    specific organizational policies or requirements.
    Include a configuration file where custom checks can be defined and
    managed.
    10. Reporting and Alerting:
    Generate a summary report of the security audit and hardening process,
    highlighting any issues that need attention.
    Optionally, configure the script to send email alerts or notifications if critical
    vulnerabilities or misconfigurations are found.
    Deliverables:
    • A fully functional Bash script for automating security audits and server hardening
    on Linux servers.
    • Project should be uploaded to GitHub.
    • A README. md file with detailed instructions on how to install, configure, and use the
    • Example configuration files or templates for customizing security checks and
    hardening measures.
    Evaluation Criteria:
    • Thoroughness and accuracy of the security audit checks and hardening measures.
    • Inclusion and correctness of IPv4/1Pv6-specific security checks and hardening
    Steps.
    • Correct identification and reporting of public vs. private IP addresses.
    • Implementation of the hardening steps outlined in the provided document.
    • Modularity and ease of reuse and customization across different server
    environments.
    Clarity and completeness of the README documentation.
    : Proper use of version control, with well documented commits and structured code. 


